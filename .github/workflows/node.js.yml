name: Build and Deploy

on:
  push:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: docker/setup-docker@v2

      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          cp $ENV_DEV .env
          docker login -u ${{ secrets.CI_REGISTRY_USER }} -p ${{ secrets.CI_REGISTRY_PASSWORD }} ${{ secrets.CI_REGISTRY }}
          docker build --no-cache -t ${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }} .
          docker tag ${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }} ${{ secrets.DOCKER_IMAGE_NAME }}:latest

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ secrets.DOCKER_IMAGE_NAME }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Set up Docker
        uses: docker/setup-docker@v2

      - name: Deploy Docker container
        run: |
          echo "Deploying Docker container..."
          docker login -u ${{ secrets.CI_REGISTRY_USER }} -p ${{ secrets.CI_REGISTRY_PASSWORD }} ${{ secrets.CI_REGISTRY }}
          docker pull ${{ secrets.DOCKER_IMAGE_NAME }}:latest

          if [ "$(docker ps -q -f name=${{ secrets.CONTAINER_NAME }})" ]; then
            echo "Stopping existing container..."
            docker stop ${{ secrets.CONTAINER_NAME }}
          fi

          if [ "$(docker ps -a -q -f name=${{ secrets.CONTAINER_NAME }})" ]; then
            echo "Removing existing container..."
            docker rm ${{ secrets.CONTAINER_NAME }}
          fi

          docker run -d --restart always --name ${{ secrets.CONTAINER_NAME }} -p ${{ secrets.PORT_MAPPING }} ${{ secrets.DOCKER_IMAGE_NAME }}:latest
